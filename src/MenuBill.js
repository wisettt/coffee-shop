import React, { useEffect, useState } from "react";
import { useNavigate, useSearchParams } from "react-router-dom";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faArrowLeft } from "@fortawesome/free-solid-svg-icons";
import "./MenuBill.css";

const MenuBill = () => {
  const [searchParams] = useSearchParams();
  const tableNumber = searchParams.get("table") || "1"; // ‚úÖ ‡∏î‡∏∂‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ï‡πä‡∏∞‡∏à‡∏≤‡∏Å URL
  const [orderDetails, setOrderDetails] = useState(null);
  const navigate = useNavigate();

  useEffect(() => {
    console.log(`üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏ï‡πä‡∏∞‡∏ó‡∏µ‡πà ${tableNumber}...`);

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å localStorage ‡∏Å‡πà‡∏≠‡∏ô
    const localOrder = JSON.parse(localStorage.getItem(`orderDetails_table_${tableNumber}`));
    if (localOrder) {
      console.log("üì¶ ‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å localStorage:", localOrder);
      setOrderDetails(localOrder);
      return; // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å Backend
    }

    // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å Backend ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô localStorage
    const fetchOrders = async () => {
      try {
        const response = await fetch(`http://localhost:5000/orders?table=${tableNumber}`);
        if (!response.ok) {
          throw new Error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ");
        }
        const data = await response.json();

        console.log("‚úÖ ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å Backend:", data);

        if (data.length > 0) {
          setOrderDetails(data[0]); // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏£‡∏Å
        } else {
          setOrderDetails(null);
        }
      } catch (error) {
        console.error("‚ùå Error fetching orders:", error);
        alert("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå");
      }
    };

    fetchOrders();
  }, [tableNumber]);

  const handleOrderReceived = async () => {
    console.log(`‚úÖ ‡πÇ‡∏ï‡πä‡∏∞‡∏ó‡∏µ‡πà ${tableNumber}: ‡∏£‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!`);
    
    try {
      // ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÑ‡∏õ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      const response = await fetch(`http://localhost:5000/orders/${orderDetails.id}/received`, {
        method: 'POST',
      });
      if (response.ok) {
        alert(`‡πÇ‡∏ï‡πä‡∏∞‡∏ó‡∏µ‡πà ${tableNumber}: ‡∏£‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!`);
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π
        setOrderDetails(prevOrder => ({
          ...prevOrder,
          status: 'received',
        }));
      } else {
        alert('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π');
      }
    } catch (error) {
      console.error("‚ùå Error updating order status:", error);
      alert("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π");
    }
  };

  return (
    <div className="menu-bill">
      {/* ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö */}
      <button className="back-button" onClick={() => navigate(`/coffee-shop?table=${tableNumber}`)}>
        <FontAwesomeIcon icon={faArrowLeft} />
      </button>

      <h2 className="bill-header">üßæ ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ - ‡πÇ‡∏ï‡πä‡∏∞‡∏ó‡∏µ‡πà {tableNumber}</h2>

      {orderDetails ? (
        <div className="bill-items">
          {orderDetails.items.map((item, index) => (
            <div key={index} className="bill-item">
              <span className="item-name">{item.name}</span>
              <span className="item-quantity">x {item.quantity}</span>
              <span className="item-price">{(item.price * item.quantity).toFixed(2)}‡∏ø</span>
            </div>
          ))}
          <div className="bill-total">
            <span>‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</span>
            <span>{orderDetails.totalAmount.toFixed(2)}‡∏ø</span>
          </div>
          <p className="order-date">üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {new Date(orderDetails.date).toLocaleString()}</p>
        </div>
      ) : (
        <p>‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏ï‡πä‡∏∞‡∏ó‡∏µ‡πà {tableNumber}</p>
      )}

      {/* ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ */}
      {orderDetails?.items.length > 0 && (
        <div className="button-group">
          <button className="action-button" onClick={handleOrderReceived}>
            ‚úÖ ‡∏£‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏•‡πâ‡∏ß
          </button>
        </div>
      )}
    </div>
  );
};

export default MenuBill;
